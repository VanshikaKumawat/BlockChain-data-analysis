# -*- coding: utf-8 -*-
"""tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LNINhzfUzm7BdHC8i2rs8gH9ayHVSg0o
"""

df = pd.read_csv('/content/BlockChain-data-analysis/data/processed/cleaned_dataset.csv')

drop_cols = ['Unnamed: 0', 'Index', 'Address']
df.drop(columns=[col for col in drop_cols if col in df.columns], inplace=True)

df.columns = df.columns.str.strip()


X = df.drop(columns=['FLAG'])
y = df['FLAG']


X.replace(' ', np.nan, inplace=True)
X = X.apply(pd.to_numeric, errors='coerce')
X.fillna(0, inplace=True)

from sklearn.preprocessing import RobustScaler
scaler = RobustScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, stratify=y, random_state=42)

rf = RandomForestClassifier(random_state=42)
rf_grid = GridSearchCV(estimator=rf, param_grid=rf_params, cv=5, n_jobs=-1, scoring='accuracy', verbose=1)
rf_grid.fit(X_train, y_train)

from joblib import dump
dump(rf_grid.best_estimator_, '/content/BlockChain-data-analysis/models/best_rf_model.joblib')

# from joblib import load
# model = load('/content/BlockChain-data-analysis/models/best_rf_model.joblib')

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import roc_curve, auc, confusion_matrix, accuracy_score, classification_report

# Predict using best model
best_rf = rf_grid.best_estimator_
y_pred = best_rf.predict(X_test)
y_proba = best_rf.predict_proba(X_test)[:, 1]


def plot_confusion_matrix(y_true, y_pred):
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
    plt.title("ðŸ“‰ Confusion Matrix - Best Random Forest")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()


def plot_roc_curve(y_true, y_proba):
    fpr, tpr, _ = roc_curve(y_true, y_proba)
    roc_auc = auc(fpr, tpr)
    plt.figure()
    plt.plot(fpr, tpr, color='darkorange', label=f"ROC curve (AUC = {roc_auc:.2f})")
    plt.plot([0, 1], [0, 1], 'k--')
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    plt.title("ðŸ§  ROC Curve - Best Random Forest")
    plt.legend(loc="lower right")
    plt.grid()
    plt.show()

plot_confusion_matrix(y_test, y_pred)

plot_roc_curve(y_test, y_proba)

print("\n Final Evaluation Report - Best Random Forest")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

