# -*- coding: utf-8 -*-
"""03_feature_engineering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LNINhzfUzm7BdHC8i2rs8gH9ayHVSg0o
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/VanshikaKumawat/BlockChain-data-analysis.git
# %cd /content/BlockChain-data-analysis

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sn
df = pd.read_csv('/content/BlockChain-data-analysis/data/processed/cleaned_dataset.csv')
df.head()

from sklearn.preprocessing import RobustScaler

print(" Raw dataset shape:", df.shape)

drop_cols = [
    'Unnamed: 0', 'Index',
    'ERC20 avg time between sent tnx', 'ERC20 avg time between rec tnx',
    'ERC20 avg time between rec 2 tnx', 'ERC20 avg time between contract tnx',
    'ERC20 min val sent contract', 'ERC20 max val sent contract', 'ERC20 avg val sent contract'
]

df.drop(columns=[col for col in drop_cols if col in df.columns], inplace=True)
df.columns = df.columns.str.strip()


log_cols = [
    'Avg min between sent tnx', 'Avg min between received tnx',
    'Time Diff between first and last (Mins)', 'Sent tnx', 'Received Tnx',
    'Number of Created Contracts', 'Unique Received From Addresses', 'Unique Sent To Addresses',
    'min value received', 'max value received', 'avg val received',
    'min val sent', 'max val sent', 'avg val sent',
    'min value sent to contract', 'max val sent to contract', 'avg value sent to contract',
    'total transactions (including tnx to create contract)', 'total Ether sent',
    'total ether received', 'total ether sent contracts', 'total ether balance',
    'Total ERC20 tnxs', 'ERC20 total Ether received', 'ERC20 total ether sent',
    'ERC20 total Ether sent contract', 'ERC20 uniq sent addr', 'ERC20 uniq rec addr',
    'ERC20 uniq sent addr.1', 'ERC20 uniq rec contract addr',
    'ERC20 min val rec', 'ERC20 max val rec', 'ERC20 avg val rec',
    'ERC20 min val sent', 'ERC20 max val sent', 'ERC20 avg val sent',
    'ERC20 uniq sent token name', 'ERC20 uniq rec token name',
    'unique_counterparties', 'total_activity'
]

existing_log_cols = [col for col in log_cols if col in df.columns]


for col in existing_log_cols:
    df[col] = df[col].apply(lambda x: np.log1p(x) if pd.notnull(x) and x >= 0 else x)

scaler = RobustScaler()
df[existing_log_cols] = scaler.fit_transform(df[existing_log_cols])


final_df = df.copy()
print("🎯 Final feature-engineered dataset shape:", final_df.shape)
print("📌 Final columns:\n", final_df.columns.tolist())

# Save final feature-engineered dataset
final_df.to_csv('/content/BlockChain-data-analysis/data/processed/feature_engineered_dataset.csv', index=False)
print("✅ Feature-engineered dataset saved at: /content/BlockChain-data-analysis/data/processed/feature_engineered_dataset.csv")
